{"version":3,"sources":["Files/Resume.pdf","components/Navigation/NavBar/NavBar.js","components/Navigation/NavButton/TopDrawer/DrawerButton/DrawerButton.js","components/Navigation/NavButton/TopDrawer/TopDrawer/TopDrawer.js","components/Navigation/NavButton/NavButton.js","components/Icon/BrandIcon.js","components/Home/Home.js","components/About/About.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","navBar","scrollTo","page","document","getElementById","scrollIntoView","className","onClick","Component","drawerButton","line","this","props","show","click","topDrawer","drawerClasses","navButton","drawerClickHandler","brandIcon","href","hyperLink","rel","target","icon","iconClass","size","main","id","faLinkedin","faGithubSquare","resume","faFile","about","App","state","topDrawerOpen","drawerToggleClickHandler","setState","prevState","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+GAAAA,EAAOC,QAAU,IAA0B,oC,gUCsB5BC,G,uNAhBXC,SAAW,SAAAC,GACPC,SAASC,eAAeF,GAAMG,kB,wEAGxB,IAAD,OACL,OACI,yBAAKC,UAAU,UACX,4BACI,wBAAIC,QAAS,kBAAI,EAAKN,SAAS,UAA/B,QACA,wBAAIM,QAAS,kBAAI,EAAKN,SAAS,WAA/B,e,GAXCO,cCgBNC,G,6LAdP,IAAIC,EAAO,qBAMX,OAJGC,KAAKC,MAAMC,OACVH,EAAO,2BAIP,yBAAKJ,UAAY,gBAAgBC,QAASI,KAAKC,MAAME,OACjD,yBAAKR,UAAaI,S,GAVPF,cC8BZO,G,iNA5BXd,SAAW,SAAAC,GACPC,SAASC,eAAeF,GAAMG,iBAC9B,EAAKO,MAAME,S,wEAGL,IAAD,OAEDE,EAAgB,aAMpB,OAJIL,KAAKC,MAAMC,OACXG,EAAgB,mBAIhB,yBAAKV,UAAaU,GACd,6BACI,6BACI,4BACI,wBAAIT,QAAS,kBAAI,EAAKN,SAAS,UAA/B,QACA,wBAAIM,QAAS,kBAAI,EAAKN,SAAS,WAA/B,iB,GArBJO,cCcTS,E,iLATP,OACI,yBAAKX,UAAU,iBACX,kBAAC,EAAD,CAAcQ,MAAOH,KAAKC,MAAMM,mBAAoBL,KAAMF,KAAKC,MAAMC,OACrE,kBAAC,EAAD,CAAWC,MAAOH,KAAKC,MAAMM,mBAAoBL,KAAMF,KAAKC,MAAMC,Y,GAN1DL,a,sBCKTW,EANG,SAAAP,GAAK,OACnB,uBAAGQ,KAAMR,EAAMS,UAAWC,IAAI,sBAAsBC,OAAO,UACvD,kBAAC,IAAD,CAAiBC,KAAMZ,EAAMa,UAAWC,KAAK,KAAKpB,UAAU,W,gCCyBrDqB,E,iLApBP,OACI,yBAAKC,GAAG,QACJ,yBAAKtB,UAAU,aACX,uBAAGA,UAAU,SACT,gDAEJ,uBAAGA,UAAU,YACT,+DAEJ,yBAAKA,UAAU,SACX,kBAAC,EAAD,CAAWe,UAAU,4CAA4CI,UAAWI,MAC5E,kBAAC,EAAD,CAAWR,UAAU,6BAA6BI,UAAWK,MAC7D,kBAAC,EAAD,CAAWT,UAAYU,IAAQN,UAAWO,a,GAf/CxB,aCcJyB,G,MAnBD,SAAArB,GAAK,OACf,yBAAKgB,GAAG,SACJ,yBAAKtB,UAAU,mBACX,yBAAKA,UAAU,eAAf,YAGA,yBAAKA,UAAU,cAAf,sRAGI,6BACA,6BAJJ,0RCuBG4B,E,2MAvBbC,MAAQ,CACNC,eAAe,G,EAGjBC,yBAA2B,WACzB,EAAKC,UAAS,SAACC,GACb,MAAO,CAACH,eAAgBG,EAAUH,mB,wEAKpC,OACA,yBAAK9B,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAWY,mBAAoBP,KAAK0B,yBAA0BxB,KAAMF,KAAKwB,MAAMC,gBAE/E,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GAlBY5B,aCGEgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAS3C,SAASC,eAAe,SD2H3C,kBAAmB2C,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.8ca46250.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Resume.bde511f0.pdf\";","import React, {Component} from 'react';\r\n\r\nimport './NavBar.css';\r\n\r\nclass navBar extends Component {\r\n\r\n    scrollTo = page => {\r\n        document.getElementById(page).scrollIntoView();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"navbar\">\r\n                <ul>\r\n                    <li onClick={()=>this.scrollTo('home')}>Home</li>\r\n                    <li onClick={()=>this.scrollTo('about')}>About</li>\r\n                </ul>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default navBar;","import React, {Component} from 'react';\r\n\r\nimport './DrawerButton.css';\r\n\r\nclass drawerButton extends Component {\r\n    render() {\r\n        let line = \"toggle-button-line\";\r\n        \r\n        if(this.props.show) {\r\n            line = \"toggle-button-line-open\"\r\n        }\r\n\r\n        return(\r\n            <div className = \"toggle-button\" onClick={this.props.click}>\r\n                <div className = {line}/>\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default drawerButton;","import React, {Component} from 'react';\r\n\r\nimport './TopDrawer.css';\r\n\r\nclass topDrawer extends Component {\r\n\r\n    scrollTo = page => {\r\n        document.getElementById(page).scrollIntoView();\r\n        this.props.click();\r\n    }\r\n\r\n    render() {\r\n\r\n        let drawerClasses = 'top-drawer';\r\n\r\n        if (this.props.show) {\r\n            drawerClasses = 'top-drawer open';\r\n        }\r\n\r\n        return (\r\n            <div className = {drawerClasses}>\r\n                <div>\r\n                    <div>\r\n                        <ul>\r\n                            <li onClick={()=>this.scrollTo('home')}>Home</li>\r\n                            <li onClick={()=>this.scrollTo('about')}>About</li>\r\n                        </ul>   \r\n                    </div>\r\n                </div>\r\n            </div> \r\n        );\r\n    }  \r\n}\r\n\r\nexport default topDrawer;","import React, {Component} from 'react';\r\n\r\nimport './NavButton.css';\r\nimport DrawerButton from './TopDrawer/DrawerButton/DrawerButton';\r\nimport TopDrawer from './TopDrawer/TopDrawer/TopDrawer';\r\n\r\nclass navButton extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"navbar-mobile\">\r\n                <DrawerButton click={this.props.drawerClickHandler} show={this.props.show}/>\r\n                <TopDrawer click={this.props.drawerClickHandler} show={this.props.show}/>\r\n            </div>\r\n        );\r\n    } \r\n}\r\n\r\nexport default navButton;","import React from 'react';\r\n\r\nimport './BrandIcon.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nconst brandIcon = props => (\r\n    <a href={props.hyperLink} rel=\"noopener noreferrer\" target=\"_blank\">\r\n        <FontAwesomeIcon icon={props.iconClass} size=\"3x\" className=\"icon\"></FontAwesomeIcon>\r\n    </a>\r\n);\r\n\r\nexport default brandIcon;","import React, {Component} from 'react';\r\n\r\nimport './Home.css';\r\nimport BrandIcon from '../Icon/BrandIcon';\r\nimport { faLinkedin ,faGithubSquare } from '@fortawesome/free-brands-svg-icons';\r\nimport { faFile } from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport resume from '../../Files/Resume.pdf';\r\n\r\nclass main extends Component {\r\n    render() {\r\n\r\n        return (\r\n            <div id=\"home\">\r\n                <div className=\"container\">\r\n                    <p className=\"title\">\r\n                        <strong>Nathan Chau</strong>\r\n                    </p>\r\n                    <p className=\"subtitle\">\r\n                        <em>Software Developer and Bassist</em>\r\n                    </p>\r\n                    <div className=\"icons\">\r\n                        <BrandIcon hyperLink=\"https://www.linkedin.com/in/nathankcchau/\" iconClass={faLinkedin}/>\r\n                        <BrandIcon hyperLink=\"https://github.com/leiffen\" iconClass={faGithubSquare}/>\r\n                        <BrandIcon hyperLink= {resume} iconClass={faFile}/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default main;","import React from 'react';\r\n\r\nimport './About.css';\r\n\r\nconst about = props => (\r\n    <div id=\"about\">\r\n        <div className=\"container-about\">\r\n            <div className=\"about-title\">\r\n                About me\r\n            </div>\r\n            <div className=\"about-text\">\r\n                I am a highly motivated developer with a passion to design and combine features to create the best experience for users.\r\n                I consider myself to be a student who is eager to learn and build on my technical skill while stay tuned with the latest updates on software developments.\r\n                <br></br>\r\n                <br></br>\r\n                Aside from designing, I also have strong passion in music.\r\n                As a bassist, I enjoy creating music that motivates listeners with groove and low end rhythm.\r\n                In my spare time, I create bass covers of various styles of music and am currently part of a band called \"Lost n'Found\".\r\n            </div>\r\n        </div>\r\n    </div>\r\n);\r\n\r\nexport default about;","import React, { Component } from 'react';\n\nimport './App.css';\n\nimport Navbar from './components/Navigation/NavBar/NavBar';\nimport Navbutton from './components/Navigation/NavButton/NavButton';\nimport Home from './components/Home/Home';\nimport About from './components/About/About';\n\nclass App extends Component {\n  state = {\n    topDrawerOpen: false\n  };\n  \n  drawerToggleClickHandler = () => {\n    this.setState((prevState) => {\n      return {topDrawerOpen: !prevState.topDrawerOpen}\n    });\n  };\n\n  render() {\n    return (\n    <div className=\"App\">\n      <Navbar/>\n      <Navbutton drawerClickHandler={this.drawerToggleClickHandler} show={this.state.topDrawerOpen}/>\n      \n      <Home/>\n      <About/>\n    </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}